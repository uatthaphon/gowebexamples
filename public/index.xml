<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go เว็บตัวอย่าง</title>
    <link>https://gowebexamples.urairat.com/</link>
    <description>Recent content on Go เว็บตัวอย่าง</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>th-th</language>
    
	<atom:link href="https://gowebexamples.urairat.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello World</title>
      <link>https://gowebexamples.urairat.com/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/hello-world/</guid>
      <description>Hello World เกี่ยวกับบทเรียน ภาษา Go เป็นภาษาที่มีมาพร้อมกับสิ่งอำนวยความสะดวกที่จำเป็นสำหรับการใช้งาน และมีเว็บเซิร์ฟเวอร์ในตัวพร้อมสำหรับการใช้งาน แพ็กเกจ net/http ซึ่งมีอยู่ในสแตนดาร์ดไลบรารีมีฟังก์ชันการทำงานที่เพียบพร้อมสำหรับ HTTP โพรโทคอล และอื่นๆอีกมากมาย ทั้งในส่วนของ HTTP client และ HTTP server ตัวอย่างที่เรามีให้จะทำให้คุณเห็นภาพว่ามันง่ายขนาดไหน ที่เราจะทำการสร้างเว็บเซิร์ฟเวอร์ที่จะทำให้คุณสามารถที่จะเปิดดูได้จากเบราว์เซอร์ของคุณ
  (adsbygoogle = window.adsbygoogle || []).push({});  การจัดการ Request ขั้นแรก เราจะทำการสร้าง Handler ซึ่งทำหน้าที่รับข้อมูล HTTP ที่ถูกส่งเข้ามาทั้งหมดจากเบราว์เซอร์ ไม่ว่าจะมาจาก HTTP client หรือ API
Handler ในภาษา Go เราสามารถเขียนเป็นฟังก์ชันได้ตามตัวอย่างทางด้านล่าง func (w http.ResponseWriter, r *http.Request) จากฟังก์ชันจะมีการรับค่า:
 http.ResponseWriter ซึ่งเป็นส่วนที่เราจะใช้เพื่อเขียนข้อมูล text/html ก่อนที่จะค่าส่งกลับไป http.Request เป็นส่วนเก็บข้อมูลจาก HTTP request ทั้งหมดเมื่อมีการเรียกเข้ามาซึ่งจะประกอบไปด้วย ข้อมูล URL และข้อมูล header ทั้งหมด  การสร้าง Request Handler จากฝั่ง Server ก็สามารถสร้างได้ง่ายๆ ดังนี้: http.</description>
    </item>
    
    <item>
      <title>HTTP เซิร์ฟเวอร์</title>
      <link>https://gowebexamples.urairat.com/http-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/http-server/</guid>
      <description>HTTP เซิร์ฟเวอร์ เกี่ยวกับบทเรียน จากบทเรียนตัวอย่างคุณจะได้เรียนรู้การสร้าง HTTP server ขั้นพื้นฐานด้วยภาษา Go อย่างแรกเลย เรามาดูกันดีกว่าว่า HTTP server ที่เราจะสร้าง มันควรที่จะทำอะไรได้บ้าง โดยพื้นฐานแล้ว HTTP server มีหน้าที่หลักๆ ดังต่อไปนี้
 ประมวลผลรีเควสต์ที่ถูกส่งมา: คือการประมวลผลจาก รีเควสต์ที่ถูกส่งมาจากผู้ใช้งานที่เรียกมาจากเบราว์เซอร์ เมื่อพวกเขาทำการเปิดดูเว็บไซต์ ไม่ว่าจะเป็นการล็อกอินเข้าสู่ระบบ หรือการโพสต์รูปภาพเป็นต้น เสิร์ฟสแตติกไฟล์: ไม่ว่าจะเป็นการเสิร์ฟ JavaScript, CSS หรือไฟล์รูปภาพไปยังเบราว์เซอร์ เพื่อการสร้างประสบการณ์การรับรู้แบบไดนามิกให้กับผู้ใช้งานของเรา รอรับการเชื่อมต่อ: HTTP Server จะถูกเปิดไว้เพื่อรอรับรีเควสต์จากพอร์ตที่เราได้กำหนดไว้ เมื่อมีการร้องของมาจากอินเทอร์เน็ต    (adsbygoogle = window.adsbygoogle || []).push({});  ประมวลผลรีเควสต์ที่ถูกส่งมา net/http แพ็กเกจ ประกอบไปด้วยตัวช่วยที่จำเป็นทั้งหมดสำหรับรองรับรีเควสต์ที่เข้ามา เราจะสามารถจัดการกับมันได้แบบไดนามิก เราสามารถสร้าง handler ได้ด้วย http.HandleFunc ฟังก์ชัน ตัวแปรแรกทำการรับ path สำหรับจับคู่เส้นทาง และตัวแปรตัวที่สองรับฟังก์ชันที่ใช้สำหรับจัดการสิ่งต่างๆ จากตัวอย่างด้านล่าง เมื่อผู้ใช้งานเรียกหน้าเว็บผ่านเบราว์เซอร์เพื่อเข้าสู่เว็บไซต์ของคุณ (http://example.com/) และพวกเขาจะเห็นกับข้อความต้อนรับที่อบอุ่น
http.HandleFunc(&amp;#34;/&amp;#34;, func (w http.ResponseWriter, r *http.</description>
    </item>
    
    <item>
      <title>เราติ้ง (โดยใช้ gorilla/mux)</title>
      <link>https://gowebexamples.urairat.com/routes-using-gorilla-mux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/routes-using-gorilla-mux/</guid>
      <description>เราติ้ง (โดยใช้ gorilla/mux) เกี่ยวกับบทเรียน แพ็กเกจ net/http ในภาษา Go มีฟังก์ชันเพื่ออำนวยความสะดวกสำหรับการสร้างและใช้งาน HTTP โพรโทคอล แต่มีเรื่องหนึ่งที่ทำได้ไม่ดีนัก คือถ้าหากเราต้องเจอกับรีเควสต์ที่ซับซ้อน อย่างเช่นในกรณีที่เราต้องการแยกตัวแปรจากรีเควสต์ในรูปแบบ url ตัวเดียวโดดๆ อย่างไรก็แล้วแต่เราก็มีแพ็กเกจที่เป็นที่นิยมซึ่งถูกพูดถึงกันเป็นอย่างมาใน Go คอมมูนิตี้ว่าเป็นแพ็กเกจที่เขียนออกมาได้ดีและโค้ดมีคุณภาพมาก ในบทนี้เราจะมาเรียนรู้การใช้แพ็กเกจ gorilla/mux เพื่อสร้างเร้า ตั้งชื่อตัวแปร จัดการกับ GET/POST เมธอด และการจัดการโดเมน
  (adsbygoogle = window.adsbygoogle || []).push({});  การติดตั้งแพ็กเกจ gorilla/mux gorilla/mux คือ แพ็กเกจที่สร้างมาเพื่อใช้งานร่วมกับ HTTP เร้าเตอร์ของ Go ซึ่งมีฟีเจอร์มากมายที่จะช่วยเพิ่มความรวดเร็วและประสิทธิภาพในการเขียนเว็บแอปพลิเคชัน แพ็กเกจนี้สร้างขึ้นโดยมีการรับตัวแปร func (w http.ResponseWriter, r *http.Request) เช่นเดียวกับของ Go ซึ่งนั่นทำให้แพ็กเกจนี้สามารถใช้งานได้กับ HTTP ไลบรารีอย่าง middleware และ application ซึ่งถูกสร้างขึ้นมาด้วยแพ็กเกจ HTTP พื้นฐานของ Go ที่มีอยู่แล้ว เราใช่คำสั่ง go get เพื่อติดตั้งแพ็กเกจจาก Github
go get -u github.</description>
    </item>
    
    <item>
      <title>เทมเพลต</title>
      <link>https://gowebexamples.urairat.com/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/templates/</guid>
      <description>เทมเพลต เกี่ยวกับบทเรียน แพ็กเกจ html/template ที่มีมาให้เราได้ใช้เป็นเทมเพลตสำหรับภาษา HTML ที่เพรียบร้อม สำหรับใช้ในส่วนของการแสดงผลข้อมูลสำหรับเว็บแอปพลิเคชั่นในเว็บเบราว์เซอร์ของผู้ใช้งาน ข้อดีอย่างหนึ่งของ เทมเพลตในภาษา Go ก็เห็นจะเป็นเรื่องของการ escape ข้อมูลที่ได้รับมาโดยอัตโนมัติ ดังนั้นเราก็หายห่วงในเรื่องการโจมตีแบบ XSS ไปได้เลย เพราะภาษา Go จะทำการวิเคราะห์ HTML เพมเพลต และจะ escape อินพุตทั้งหมดที่รับมาก่อนที่จะทำการแสดงผลออกไปยังหน้าเบราว์เซอร์
  (adsbygoogle = window.adsbygoogle || []).push({});  เทมเพลตตัวแรก การใช้งานหรือเขียนเทมเพลตในภาษา Go นั้นไม่มีอะไรซับซ้อนเลย จากตัวอย่างต่อไปนี้จะแสดงให้เห็นการส้าง TODO ลิส โดยทำการเขียนออกมาเป็น ul ในภาษา HTML ในขณะที่ทำการประมวลผลเทมเพลตนั้น ข้อมูลที่ถูกส่งเข้ามาสามารถที่จะเป็นข้อมูลชนิดใดก็ได้ที่มาจากโครงสร้งข้อมูลของภาษา Go มันสามารถรับได้ทั้งแบบตัวอักษรและตัวเลข หรือว่าจะเป็นโครงสร้างข้อมูลแบบซ้อนทับกันเหมือนดังตัวอย่างด้านล่างนี้ การเข้าถึงข้อมูลชั้นแรกสุดที่ได้รับมาในเทมเพลตเราสามารถเข้าถึงได้โดย {{.}} จุดข้างในวงเล็บปีกกา นั่นเรียกว่า ไปป์ไลน์ (pipeline) และเป็นองค์ประกอบรากของข้อมูลหรือข้อมูลลำดับแรก
data := TodoPageData{ PageTitle: &amp;#34;My TODO list&amp;#34;, Todos: []Todo{ {Title: &amp;#34;Task 1&amp;#34;, Done: false}, {Title: &amp;#34;Task 2&amp;#34;, Done: true}, {Title: &amp;#34;Task 3&amp;#34;, Done: true}, }, } &amp;lt;h1&amp;gt;{{.</description>
    </item>
    
    <item>
      <title>ฟอร์ม</title>
      <link>https://gowebexamples.urairat.com/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/forms/</guid>
      <description>ฟอร์ม ตัวอย่างนี้จะแสดงการสร้างฟอร์มสำหรับติดต่อและการส่งข้อมูลกลับไปใน struct
  (adsbygoogle = window.adsbygoogle || []).push({});  // forms.go package main import ( &amp;#34;html/template&amp;#34; &amp;#34;net/http&amp;#34; ) type ContactDetails struct { Email string Subject string Message string } func main() { tmpl := template.Must(template.ParseFiles(&amp;#34;forms.html&amp;#34;)) http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { if r.Method != http.MethodPost { tmpl.Execute(w, nil) return } details := ContactDetails{ Email: r.FormValue(&amp;#34;email&amp;#34;), Subject: r.FormValue(&amp;#34;subject&amp;#34;), Message: r.FormValue(&amp;#34;message&amp;#34;), } // do something with details 	_ = details tmpl.</description>
    </item>
    
    <item>
      <title>แอสเสทและไฟล์</title>
      <link>https://gowebexamples.urairat.com/static-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/static-files/</guid>
      <description>แอสเสทและไฟล์ ตัวอย่างต่อไปนี้จะแสดงให้เห็นถึงการใช้งานสแตติกไฟล์ อย่างพวก CSS หรือ JS จากไดเรคทอรี่ที่ถูกเก็บไฟล์เหล่านี้ไว้
  (adsbygoogle = window.adsbygoogle || []).push({});  // static-files.go package main import &amp;#34;net/http&amp;#34; func main() { fs := http.FileServer(http.Dir(&amp;#34;assets/&amp;#34;)) http.Handle(&amp;#34;/static/&amp;#34;, http.StripPrefix(&amp;#34;/static/&amp;#34;, fs)) http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil) } $ tree assets/ assets/ └── css └── styles.css $ go run static-files.go $ curl -s http://localhost:8080/static/css/styles.css body { background-color: black; }</description>
    </item>
    
    <item>
      <title>มิดเดิลแวร์ - ขั้นพื้นฐาน</title>
      <link>https://gowebexamples.urairat.com/basic-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/basic-middleware/</guid>
      <description>Middleware (Basic) ตัวอย่างต่อไปนี้จะแสดงวิธีการสร้าง logging จากมิดเดิลแวร์ในภาษา Go
มิดเดิลแวร์จะทำการรับค่า http.HandlerFunc เป็นตัวแปรตัวหนึ่ง ซึ่งจะทำการครอบตัวฟังก์ชันนั้นเอาไว้และจะส่งค่า http.HandlerFunc ตัวใหม่กลับไปจากเซิร์ฟเวอร์
  (adsbygoogle = window.adsbygoogle || []).push({});  // basic-middleware.go package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func logging(f http.HandlerFunc) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { log.Println(r.URL.Path) f(w, r) } } func foo(w http.ResponseWriter, r *http.Request) { fmt.Fprintln(w, &amp;#34;foo&amp;#34;) } func bar(w http.ResponseWriter, r *http.Request) { fmt.Fprintln(w, &amp;#34;bar&amp;#34;) } func main() { http.HandleFunc(&amp;#34;/foo&amp;#34;, logging(foo)) http.</description>
    </item>
    
    <item>
      <title>มิดเดิลแวร์ - ขั้นสูง</title>
      <link>https://gowebexamples.urairat.com/advanced-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/advanced-middleware/</guid>
      <description>มิดเดิลแวร์ - ขั้นสูง ตัวอย่างต่อไปนี้จะแสดงวิธีการสร้าง มิดเดิลแวร์ขั้นสูง ในภาษา Go
ตัวมิดเดิลแวร์จะทำการรับ http.HandlerFunc ในรูปแบบของตัวแปร และทำการครอบมันไว้แล้วจึงส่งค่ากลับไปเป็น http.HandlerFunc ตัวใหม่ให้กับเซิร์ฟเวอร์เพื่อรอการเรียกใช้งาน
นี่คือคำจัดกัดความใหม่ของ Middleware ซึ่งจะทำให้ง่ายต่อการผูก (chain) มิดเดอแวร์หลายๆ ตัวเข้าไว้ด้วยกัน ความคิดนี้ได้รับแรงบันดาลใจมาจาก Mat Ryers ซึ่งได้เคยพูดไว้ในเรื่องเกี่ยวกับการสร้าง APIs ถ้าหากต้องการรู้รายละเอียดเพ่ิมเติม สามารถเข้าไปดูได้ที่ here.
  (adsbygoogle = window.adsbygoogle || []).push({});  
ตัวอย่างโค้ต่อไปนี่ใช้เพื่อสร้าง มิดเดิลเวร์ตัวใหม่ และในตัวอย่างตัวเต็มเราได้ใช้ตัวอย่างโค้ดสำเร็จรูปในการสร้างเพื่อความรวดเร็ว
func createNewMiddleware() Middleware { // Create a new Middleware 	middleware := func(next http.HandlerFunc) http.HandlerFunc { // Define the http.HandlerFunc which is called by the server eventually 	handler := func(w http.</description>
    </item>
    
    <item>
      <title>Sessions</title>
      <link>https://gowebexamples.urairat.com/sessions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/sessions/</guid>
      <description>เซสชั่น ตัวอย่างต่อไปนี้จะแสดงวิธีการเก็บข้อมูลใน เซสชั่น คุกกี้ ด้วยแพ็กเกจ gorilla/sessions ซึ่งได้รับความนิยมเป็นอย่างมากในภาษา Go
คุกกี้ คือข้อมูลก้อนเล็กๆ ที่ถูกเก็บเอาไว้ในเบราเซอร์ของผู้ใช้งาน และส่งกลับมายังเซิร์ฟเวอร์ของเราทุกครั้งที่ถูกเรียกใช้งาน ในคุกกี้เราสามารถที่จะเก็บข้อมูลต่างๆ ได้อย่างเช่น ตรวจสอบว่าผู้ใช้งานเข้าสู่ระบบแล้วหรือไม่ หรือเพื่อดูว่าเขาคือใคร (ในระบบของเรา)
ในตัวอย่างต่อไปนี้เราจะอนุญาติให้ผู้ใช้งานที่ลงทะเบียนในระบบเท่านั้นที่จะสามารถเห็นข้อความลับของเราได้จากหน้า /secret ของเรา ในการที่จะสามารถเข้าใช้งานได้อย่างแรกผู้ใช้งานต้องเข้าไปที่หน้า /login เพื่อเข้าสู่ระบบและรับ เซสชั่น คุกกี้ เพื่อเข้าสู่ระบบ และเราสามารถเข้าหน้า /logout เพื่อยกเลิกการเข้าสู่ระบบได้ และนั่นจะทำให้ผู้ใช้งานไม่เห็น ข้อความลับของเราอีกจนกว่าเขาจะเข้าสู่ระบบอีกครั้ง
  (adsbygoogle = window.adsbygoogle || []).push({});  // sessions.go package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/gorilla/sessions&amp;#34; ) var ( // key must be 16, 24 or 32 bytes long (AES-128, AES-192 or AES-256) 	key = []byte(&amp;#34;super-secret-key&amp;#34;) store = sessions.</description>
    </item>
    
    <item>
      <title>เข้ารหัสแบบแฮช</title>
      <link>https://gowebexamples.urairat.com/password-hashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/password-hashing/</guid>
      <description>เข้ารหัสแบบแฮช (bcrypt) ตัวอย่งต่อไปนี้เราจะทำการโชว์วิธีการเข้ารหัสพาสเวิร์ดด้วยการใช้ bcrypt เรามาเริ่มโดยการใช้ go get เพื่อใช้งาน golang bcrypt ไลบรารี
$ go get golang.org/x/crypto/bcrypt
จากตรงนี้ ทุกๆ แอปพลิเคชั่นที่เราสร้างขึ้นก็จะสามารถเรียกใช้งานเจ้าไลบรารีตัวนี้ได้
  (adsbygoogle = window.adsbygoogle || []).push({});  // passwords.go package main import ( &amp;#34;fmt&amp;#34; &amp;#34;golang.org/x/crypto/bcrypt&amp;#34; ) func HashPassword(password string) (string, error) { bytes, err := bcrypt.GenerateFromPassword([]byte(password), 14) return string(bytes), err } func CheckPasswordHash(password, hash string) bool { err := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password)) return err == nil } func main() { password := &amp;#34;secret&amp;#34; hash, _ := HashPassword(password) // ignore error for the sake of simplicity  fmt.</description>
    </item>
    
    <item>
      <title>เจสัน</title>
      <link>https://gowebexamples.urairat.com/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/json/</guid>
      <description>เจสัน ตัวอย่างต่อไปนี้จะแสดงวิธีการ ถอดรหัสและการเข้ารหัสข้อมูลเจสันโดยการใช้แพ็กเกจ encoding/json
  (adsbygoogle = window.adsbygoogle || []).push({});  // json.go package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) type User struct { Firstname string `json:&amp;#34;firstname&amp;#34;` Lastname string `json:&amp;#34;lastname&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` } func main() { http.HandleFunc(&amp;#34;/decode&amp;#34;, func(w http.ResponseWriter, r *http.Request) { var user User json.NewDecoder(r.Body).Decode(&amp;amp;user) fmt.Fprintf(w, &amp;#34;%s %s is %d years old!&amp;#34;, user.Firstname, user.Lastname, user.Age) }) http.HandleFunc(&amp;#34;/encode&amp;#34;, func(w http.ResponseWriter, r *http.Request) { peter := User{ Firstname: &amp;#34;John&amp;#34;, Lastname: &amp;#34;Doe&amp;#34;, Age: 25, } json.</description>
    </item>
    
    <item>
      <title>เว็บซ็อกเก็ต</title>
      <link>https://gowebexamples.urairat.com/websockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/websockets/</guid>
      <description>เว็บซ็อกเก็ต ตัวอย่างต่อไปนี้จะแสดงวิธีการใช้งานเว็บซ็อกเก็ตในภาษา Go เราจะทำการสร้างเซิร์ฟเวอร์อย่างง่ายที่ทำการแสดงค่าออกมาหลังจากรับค่าที่เรารับมาทุกอย่าง เรามาเริ่มโดยการใช้ go get เพื่อใช้งาน gorilla/websocket ซึ่งเป็นไลบรารีอีกตัวที่ได้รับความนิยมกันเลยดีกว่า
$ go get github.com/gorilla/websocket
จากตรงนี้ ทุกๆ แอปพลิเคชั่นที่เราสร้างขึ้นก็จะสามารถเรียกใช้งานเจ้าไลบรารีตัวนี้ได้
  (adsbygoogle = window.adsbygoogle || []).push({});  // websockets.go package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/gorilla/websocket&amp;#34; ) var upgrader = websocket.Upgrader{ ReadBufferSize: 1024, WriteBufferSize: 1024, } func main() { http.HandleFunc(&amp;#34;/echo&amp;#34;, func(w http.ResponseWriter, r *http.Request) { conn, _ := upgrader.Upgrade(w, r, nil) // error ignored for sake of simplicity  for { // Read message from browser 	msgType, msg, err := conn.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gowebexamples.urairat.com/imprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/imprint/</guid>
      <description>Legal Disclosure Information in accordance with section 5 TMG
document.write(atob(&#34;UGhpbGlwcCBUYW5sYWs8YnI+QmVuZWRpa3RpbmVyc3RyLiA0OTxicj4zMzA5OCBQYWRlcmJvcm48YnI+&#34;)); Contact Telephone: document.write(atob(&#34;KzQ5MTc2OTEzNDIwNjc=&#34;)); E-Mail: document.write(atob(&#34;cGhpbGlwcC50YW5sYWtAZ21haWwuY29t&#34;)); Person responsible for content in accordance with 55 Abs. 2 RStV document.write(atob(&#34;UGhpbGlwcCBUYW5sYWs8YnI+QmVuZWRpa3RpbmVyc3RyLiA0OTxicj4zMzA5OCBQYWRlcmJvcm48YnI+&#34;)); Indication of source for images and graphics https://amazon.com
Disclaimer Accountability for content The contents of our pages have been created with the utmost care. However, we cannot guarantee the contents&amp;rsquo; accuracy, completeness or topicality. According to statutory provisions, we are furthermore responsible for our own content on these web pages.</description>
    </item>
    
    <item>
      <title>Privacy Statement</title>
      <link>https://gowebexamples.urairat.com/privacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gowebexamples.urairat.com/privacy/</guid>
      <description>Privacy Statement General Your personal data (e.g. title, name, house address, e-mail address, phone number, bank details, credit card number) are processed by us only in accordance with the provisions of German data privacy laws. The following provisions describe the type, scope and purpose of collecting, processing and utilizing personal data. This data privacy policy applies only to our web pages. If links on our pages route you to other pages, please inquire there about how your data are handled in such cases.</description>
    </item>
    
  </channel>
</rss>